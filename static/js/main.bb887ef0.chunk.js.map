{"version":3,"sources":["serviceWorker.js","store/const.js","store/actions.js","store/reducer.js","store/index.js","store/middleware/socketIO.js","containers/LoginForm/LoginForm.jsx","components/Message/Message.jsx","store/selectors.js","containers/ChatRoom/ChatRoom.jsx","containers/UserList/UserList.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","NUMBER_SHIFT_MESSAGES","userSet","createAction","userExist","userConnected","userListChange","messageNew","messageSend","messagesHistory","messageShift","liveModeToggle","initialState","user","userList","messages","visibleMessages","allLoaded","isLiveMode","indexVisibleMessageId","reducer","state","arguments","length","undefined","action","payload","newVisibleMessage","Object","toConsumableArray","newIndexVisibleMessageId","type","objectSpread","newMessages","concat","slice","Math","min","max","socketIO","socketUrl","socket","io","connect","pingInterval","pingTimeout","transports","loadingHistory","_ref","getState","dispatch","next","emit","trim","_ref2","isUser","on","data","connectedUsers","message","historyLimit","createSocketIO","middleware","getDefaultMiddleware","thunk","store","configureStore","devTools","process","LoginForm","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","nickname","input","current","value","preventDefault","setUser","React","createRef","bind","assertThisInitialized","focus","react_default","a","createElement","className","onSubmit","htmlFor","ref","id","placeholder","Component","Message","_props$data","dt","react","Date","toLocaleString","getIsReachedEnd","getIsReachedBegin","SHIFT_OFFSET_PERCENT","ChatRoom","_this$props","text","textInput","handleScroll","_e$currentTarget","currentTarget","scrollTop","scrollHeight","clientHeight","shiftOffset","round","prevScrollTop","wrapperBottom","wrapper","getBoundingClientRect","bottom","visibleLast","firstChild","lastChild","isShifting","reachedBegin","getMessageId","addEventListener","passive","removeEventListener","prevProps","prevState","firstMessageTop","top","lastMessageTop","snapshot","elem","index","prevFirstId","prevLastId","childNodes","elementTop","reachedEnd","_this2","messageItems","map","item","Message_Message_Message","key","onWheel","number","UserList","listItems","App","initConnect","console","log","setState","login","logout","containers_UserList_UserList","containers_ChatRoom_ChatRoom","containers_LoginForm_LoginForm","app","document","getElementById","ReactDOM","render","react_redux_es","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb887ef0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const USER_CONNECTED = 'USER_CONNECTED';\nexport const USER_DISCONNECTED = 'USER_DISCONNECTED';\nexport const USER_VERIFY = 'USER_VERIFY';\nexport const USER_EXIST = 'USER_EXIST';\nexport const USER_LIST_CHANGE = 'USER_LIST_CHANGE';\nexport const MESSAGE_SEND = 'MESSAGE_SEND';\nexport const MESSAGE_NEW = 'MESSAGE_NEW';\nexport const MESSAGE_HISTORY = 'MESSAGE_HISTORY';\nexport const MESSAGE_SHIFT = 'MESSAGE_SHIFT';\nexport const LIVE_MODE_TOGGLE = 'LIVE_MODE_TOGGLE';\nexport const NUMBER_VISIBLE_MESSAGES = 150;\nexport const NUMBER_LOADED_MESSAGES = 50;\nexport const NUMBER_SHIFT_MESSAGES = 20;\n","import {\n\tLIVE_MODE_TOGGLE,\n\tMESSAGE_HISTORY,\n\tMESSAGE_NEW,\n\tMESSAGE_SEND, MESSAGE_SHIFT,\n\tUSER_CONNECTED,\n\tUSER_DISCONNECTED,\n\tUSER_EXIST,\n\tUSER_LIST_CHANGE,\n\tUSER_VERIFY\n} from \"./const\";\nimport {createAction} from \"redux-starter-kit\";\n\nexport const userSet = createAction(USER_VERIFY);\nexport const userExist = createAction(USER_EXIST);\nexport const userConnected = createAction(USER_CONNECTED);\nexport const userDisconnected = createAction(USER_DISCONNECTED);\nexport const userListChange = createAction(USER_LIST_CHANGE);\nexport const messageNew = createAction(MESSAGE_NEW);\nexport const messageSend = createAction(MESSAGE_SEND);\nexport const messagesHistory = createAction(MESSAGE_HISTORY);\nexport const messageShift = createAction(MESSAGE_SHIFT);\nexport const liveModeToggle = createAction(LIVE_MODE_TOGGLE);\n","import {\n\tMESSAGE_HISTORY,\n\tMESSAGE_NEW,\n\tUSER_CONNECTED,\n\tUSER_DISCONNECTED,\n\tUSER_EXIST,\n\tUSER_LIST_CHANGE,\n\tNUMBER_VISIBLE_MESSAGES,\n\tMESSAGE_SHIFT, NUMBER_LOADED_MESSAGES, LIVE_MODE_TOGGLE\n} from './const'\nconst initialState = {\n\tuser: null, // Никнейм пользователя чата\n\tuserExist: false, // Флаг ошибки при наличии юзера с таким же ником\n\tuserList: [], // Список участников чата\n\tmessages: [], // Массив всех загруженных сообщений\n\tvisibleMessages: [], // Массив отображаемых сообщений в чате\n  allLoaded: false, // Флаг, выгружена ли вся история\n\tisLiveMode: true, // Флаг, что при появлении новых сообщений они добавятся в visibleMessages\n\tindexVisibleMessageId: null // Индекс в массиве messages, по которому лежит первое сообщение в visibleMessages\n};\n\nconst reducer = (state = initialState, action) => {\n\tconst {payload} = action;\n\tlet newVisibleMessage = [...state.visibleMessages];\n\tlet newIndexVisibleMessageId =state.indexVisibleMessageId;\n\tswitch (action.type) {\n\t\tcase USER_EXIST:\n\t\t\treturn  {\n\t\t\t\t...state, userExist: true\n\t\t\t};\n\t\tcase USER_CONNECTED:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tuser: payload\n\t\t\t};\n\t\tcase USER_DISCONNECTED:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tuser: null\n\t\t\t};\n\t\tcase USER_LIST_CHANGE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tuserList: payload\n\t\t\t};\n\t\tcase MESSAGE_NEW:\n\t\t\tconst newMessages = [...state.messages, payload];\n\t\t\tif (state.isLiveMode) {\n\t\t\t\tnewVisibleMessage = [...state.visibleMessages, payload].slice(-NUMBER_VISIBLE_MESSAGES);\n\t\t\t\tnewIndexVisibleMessageId = state.indexVisibleMessageId + 1 - newVisibleMessage.length + state.visibleMessages.length;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tmessages: newMessages,\n\t\t\t\tindexVisibleMessageId: newIndexVisibleMessageId,\n\t\t\t\tvisibleMessages: newVisibleMessage,\n\t\t\t};\n\t\tcase MESSAGE_HISTORY:\n\t\t\tnewVisibleMessage = [...payload, ...state.visibleMessages].slice(-NUMBER_VISIBLE_MESSAGES);\n\t\t\tnewIndexVisibleMessageId = state.indexVisibleMessageId + payload.length - newVisibleMessage.length + state.visibleMessages.length;\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tallLoaded: payload.length < NUMBER_LOADED_MESSAGES,\n\t\t\t\tmessages: [...payload, ...state.messages],\n\t\t\t\tvisibleMessages: newVisibleMessage,\n\t\t\t\tindexVisibleMessageId: newIndexVisibleMessageId,\n\t\t\t};\n\t\tcase MESSAGE_SHIFT:\n\t\t\tif (payload > 0){\n\t\t\t\tnewIndexVisibleMessageId = Math.min( state.indexVisibleMessageId + payload, state.messages.length - NUMBER_VISIBLE_MESSAGES);\n\t\t\t} else {\n\t\t\t\tnewIndexVisibleMessageId = Math.max(0, state.indexVisibleMessageId + payload);\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tvisibleMessages: state.messages.slice(newIndexVisibleMessageId, newIndexVisibleMessageId + NUMBER_VISIBLE_MESSAGES),\n\t\t\t\tindexVisibleMessageId: newIndexVisibleMessageId,\n\t\t\t};\n\t\tcase LIVE_MODE_TOGGLE:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisLiveMode: payload,\n\t\t\t};\n\t\tdefault: return state\n\t}};\n\nexport default reducer;","import { configureStore, getDefaultMiddleware } from 'redux-starter-kit';\nimport {createSocketIO} from \"./middleware/socketIO\";\nimport thunk from \"redux-thunk\";\nimport reducer from './reducer'\n\nconst socketUrl = 'https://chat-server-pavel.herokuapp.com';\nconst socketIO = createSocketIO(socketUrl);\nconst middleware = [...getDefaultMiddleware(), thunk, socketIO];\n\nexport const store = configureStore({\n\treducer,\n\tmiddleware,\n\tdevTools: process.env.NODE_ENV !== 'production',\n});","import io from 'socket.io-client';\nimport {\n\tMESSAGE_HISTORY,\n\tMESSAGE_SEND, MESSAGE_SHIFT, NUMBER_LOADED_MESSAGES, NUMBER_SHIFT_MESSAGES, NUMBER_VISIBLE_MESSAGES,\n\tUSER_CONNECTED,\n\tUSER_DISCONNECTED,\n\tUSER_VERIFY\n} from \"../const\";\nimport {messageNew, userConnected, userExist, userListChange, messagesHistory} from \"../actions\";\n\nexport const createSocketIO = (socketUrl) =>  {\n\tconst socket = io.connect(socketUrl,\n\t\t{\n\t\t\tpingInterval: 3000,\n\t\t\tpingTimeout: 10000,\n\t\t\ttransports: ['websocket', 'polling']\n\t\t});\n\n\tlet loadingHistory = false;\n\n\treturn ({getState, dispatch}) => next => action => {\n\n\t\tconst setUser = ({user, isUser})=>{\n\t\t\tif(isUser){\n\t\t\t\tdispatch(userExist());\n\t\t\t} else {\n\t\t\t\tdispatch(userConnected(user));\n\t\t\t\tsocket.on(USER_CONNECTED, data => {\n\t\t\t\t\tdispatch(userListChange(data.connectedUsers))\n\t\t\t\t});\n\t\t\t\tsocket.on(USER_DISCONNECTED, data => {\n\t\t\t\t\tdispatch(userListChange(data.connectedUsers));\n\t\t\t\t});\n\t\t\t\tsocket.on(MESSAGE_SEND, (message) => {\n\t\t\t\t\tdispatch(messageNew(message))\n\t\t\t\t});\n\t\t\t\tsocket.on(MESSAGE_HISTORY, (messages) => {\n\t\t\t\t\tloadingHistory = false;\n\t\t\t\t\tdispatch(messagesHistory(messages))\n\t\t\t\t});\n\t\t\t\tsocket.emit(USER_CONNECTED, {user, historyLimit: NUMBER_VISIBLE_MESSAGES});\n\t\t\t}\n\t\t};\n\n\t\tswitch (action.type) {\n\t\t\tcase USER_VERIFY:\n\t\t\t\tsocket.emit(USER_VERIFY, action.payload.trim(), setUser);\n\t\t\t\treturn false;\n\t\t\tcase MESSAGE_SEND:\n\t\t\t\tsocket.emit(MESSAGE_SEND, action.payload);\n\t\t\t\treturn false;\n\t\t\tcase MESSAGE_SHIFT:\n\t\t\t\tif(!loadingHistory && !getState().allLoaded && getState().indexVisibleMessageId < NUMBER_SHIFT_MESSAGES * 5) {\n\t\t\t\t\tloadingHistory = true;\n\t\t\t\t\tsocket.emit(MESSAGE_HISTORY, NUMBER_LOADED_MESSAGES)\n\t\t\t\t}\n\t\t\t\treturn next(action);\n\t\t\tdefault: return next(action);\n\t\t}\n\t}\n};\n","import React from 'react';\nimport './LoginForm.css';\nimport {connect} from \"react-redux\";\nimport {userSet} from \"../../store/actions\";\n\nclass LoginForm extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.input = React.createRef();\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\n\thandleSubmit = (e) => {\n\t\tconst nickname = this.input.current.value;\n\t\te.preventDefault();\n\t\tif (nickname !== '') {\n\t\t\tthis.props.setUser(nickname);\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.input.current.focus();\n\t}\n\n\trender() {\n\t\treturn(\n\t\t\t<div className='login'>\n\t\t\t\t<h3>Укажите Ваше имя</h3>\n\t\t\t\t<form className='login-form' onSubmit={this.handleSubmit}>\n\t\t\t\t<label htmlFor='nickname'>Ник</label>\n\t\t\t\t<input ref={this.input}\n\t\t\t\t\tid = 'nickname'\n\t\t\t\t\ttype = 'text'\n\t\t\t\t\tplaceholder='Укажите Ваш Ник'\n\t\t\t\t/>\n\t\t\t\t\t<div className='error'>{this.props.userExist ? 'В чате есть пользователь с таким Ником': null}</div>\n\t\t\t\t<input type='submit' value='Использовать'/>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\nconst mapStateToProps = (state = {}) => {\n\treturn {\n\t\tuserExist: state.userExist\n\t}\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tsetUser: (nickname) => dispatch(userSet(nickname))\n\t}\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginForm);\n\n","import * as React from 'react';\nimport './Message.css';\n\nexport const Message = (props) => {\n\tconst {dt, user, message} = props.data\n\treturn (\n\t\t<li className='message' id={props.id}>\n\t\t\t<span className='date'>[{(new Date(dt)).toLocaleString()}] </span>\n\t\t\t<span className='nick'>{user}: </span>\n\t\t\t<span className='text'>{message}</span>\n\t\t</li>\n\t);\n};","export const getIsReachedEnd = (state) => (\n\tstate.messages.length > 0 && state.visibleMessages.length > 0 ?\n\t\tstate.messages[state.messages.length - 1].id === state.visibleMessages[state.visibleMessages.length - 1].id :\n\t\tfalse\n);\nexport const getIsReachedBegin = (state) => (state.allLoaded && (state.indexVisibleMessageId === 0));","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport './ChatRoom.css'\nimport {liveModeToggle, messageSend, messageShift} from \"../../store/actions\";\nimport {Message} from \"../../components/Message\";\nimport {NUMBER_SHIFT_MESSAGES} from \"../../store/const\";\nimport {getIsReachedBegin, getIsReachedEnd} from \"../../store/selectors\";\n\nconst SHIFT_OFFSET_PERCENT = 15;\n\nclass ChatRoom extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.textInput = React.createRef();\n\t\tthis.wrapper = React.createRef();\n\t\tthis.handleScroll = this.handleScroll.bind(this);\n\t\tthis.isShifting = false;\n\t};\n\n\thandleSubmit = (e) => {\n\t\tconst {user, messageSend, } = this.props;\n\t\tconst {value: text} = this.textInput.current;\n\t\te.preventDefault();\n\t\tif (text !== '') {\n\t\t\tmessageSend(user, text);\n\t\t\tthis.textInput.current.value = '';\n\t\t}\n\t};\n\n\n\thandleScroll = (e) => {\n\t\tconst {scrollTop, scrollHeight, clientHeight } = e.currentTarget;\n\t\tconst shiftOffset =  Math.round(scrollHeight * SHIFT_OFFSET_PERCENT / 100);\n\t\tif (this.prevScrollTop === scrollTop) {\n\t\t\treturn;\n\t\t}\n\t\tconst {bottom: wrapperBottom} = this.wrapper.current.getBoundingClientRect();\n\t\tconst {bottom: lastMessageBottom} = this.wrapper.current.firstChild.lastChild.getBoundingClientRect();\n\t\tconst visibleLast = lastMessageBottom <= wrapperBottom;\n\t\t// Если прокрутка вверх\n\t\tif (this.prevScrollTop > scrollTop) {\n\n\t\t\tif (this.props.isLiveMode && !visibleLast) {\n\t\t\t\tthis.props.liveModeToggle(false);\n\t\t\t}\n\t\t\tif ((scrollTop < shiftOffset) && !this.isShifting  && !this.props.reachedBegin) {\n\t\t\t\tthis.isShifting = true;\n\t\t\t\tthis.props.messageShift(-NUMBER_SHIFT_MESSAGES);\n\t\t\t}\n\t\t}\n\n\t\t// Если прокрутка вниз\n\t\tif (this.prevScrollTop < scrollTop) {\n\t\t\tif (!this.props.isLiveMode && visibleLast) {\n\t\t\t\tthis.props.liveModeToggle(true);\n\t\t\t}\n\t\t\tif ((scrollHeight - clientHeight - scrollTop < shiftOffset) && !this.isShifting) {\n\t\t\t\tthis.isShifting = true;\n\t\t\t\tthis.props.messageShift(NUMBER_SHIFT_MESSAGES);\n\t\t\t}\n\t\t}\n\n\t\tthis.prevScrollTop = scrollTop;\n\t};\n\n\n\tgetMessageId = (id) => ('message'+id);\n\n\tcomponentDidMount() {\n\t\tthis.wrapper.current.addEventListener('scroll', this.handleScroll, { passive: true });\n\t\tthis.textInput.current.focus();\n\t}\n\tcomponentWillUnmount() {\n\t\tthis.wrapper.current.removeEventListener('scroll', this.handleScroll, { passive: true });\n\t}\n\n\tgetSnapshotBeforeUpdate(prevProps, prevState) {\n\t\tif ((prevProps.messages.length === 0) || (this.props.messages.length === 0)) {\n\t\t\treturn null\n\t\t} else{\n\t\t\tconst {top: firstChildTop} = this.wrapper.current.firstChild.firstChild.getBoundingClientRect();\n\t\t\tconst {top: lastChildTop} = this.wrapper.current.firstChild.lastChild.getBoundingClientRect();\n\t\t\treturn {\n\t\t\t\tfirstMessageTop: firstChildTop,\n\t\t\t\tlastMessageTop: lastChildTop,\n\t\t\t\tscrollTop: this.wrapper.current.scrollTop,\n\t\t\t}\n\t\t}\n\t};\n\n\tcomponentDidUpdate(prevProps, prevState, snapshot) {\n\t\tconst {current: wrapper} = this.wrapper;\n\t\tif ((prevProps.messages.length === 0) && (this.props.messages.length > 0)) {\n\t\t\twrapper.scrollTop = wrapper.scrollHeight - wrapper.clientHeight;\n\t\t\tthis.prevScrollTop = wrapper.scrollTop;\n\t\t}\n\t\tif (this.props.isLiveMode) {\n\t\t\twrapper.scrollTop = wrapper.scrollHeight - wrapper.clientHeight;\n\t\t} else if (snapshot !== null && (snapshot.scrollTop === wrapper.scrollTop)) {\n\t\t\tconst elem = wrapper.firstChild;\n\t\t\tlet index = 0;\n\t\t\tconst prevFirstId = prevProps.messages[0].id,\n\t\t\t\tprevLastId = prevProps.messages[prevProps.messages.length - 1].id;\n\t\t\tif (prevFirstId > this.props.messages[0].id) {\n\t\t\t\tindex = prevFirstId - this.props.messages[0].id;\n\t\t\t\twhile ((index > 0 ) && (elem.childNodes[index].id !== this.getMessageId(prevFirstId))) {\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\tif (elem.childNodes[index].id === this.getMessageId(prevFirstId)) {\n\t\t\t\t\tconst {top: elementTop} = elem.childNodes[index].getBoundingClientRect();\n\t\t\t\t\twrapper.scrollTop += elementTop - snapshot.firstMessageTop;\n\t\t\t\t}\n\t\t\t} else if (prevFirstId < this.props.messages[0].id) {\n\t\t\t\tindex = this.props.messages.length - this.props.messages[this.props.messages.length - 1].id + prevLastId - 1;\n\t\t\t\twhile ((index < this.props.messages.length ) && (elem.childNodes[index].id !== this.getMessageId(prevLastId))) {\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t\tif (elem.childNodes[index].id === this.getMessageId(prevLastId)) {\n\t\t\t\t\tconst {top: elementTop} = elem.childNodes[index].getBoundingClientRect();\n\t\t\t\t\twrapper.scrollTop += elementTop - snapshot.lastMessageTop;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (this.isShifting) {\n\t\t\tif ((wrapper.scrollTop === 0) && !this.props.reachedBegin) {\n\t\t\t\tthis.props.messageShift(-NUMBER_SHIFT_MESSAGES);\n\t\t\t} else if((wrapper.scrollTop + wrapper.scrollHeight === wrapper.clientHeight) && !this.props.reachedEnd) {\n\t\t\t\tthis.props.messageShift(NUMBER_SHIFT_MESSAGES);\n\t\t\t}\n\t\t}\n\t\tthis.isShifting = false;\n\t}\n\n\trender() {\n\t\tconst messageItems = this.props.messages.map(item =>\n\t\t\t<Message data={item} key={item.id} id={this.getMessageId(item.id)}/>\n\t\t);\n\t\treturn (\n\t\t\t<div className='chat-room'>\n\t\t\t\t<h3>Сообщения чата</h3>\n\t\t\t\t<div className='wrapper' ref={this.wrapper} onWheel={this.handleScroll}>\n\t\t\t\t\t<ol className='messages'>\n\t\t\t\t\t\t{messageItems}\n\t\t\t\t\t</ol>\n\t\t\t\t</div>\n\t\t\t\t<div className='sender'>\n\t\t\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t\t\t\t<input ref={this.textInput} type='text' placeholder='Введите сообщение' />\n\t\t\t\t\t\t<input type='submit' value='Отправить' />\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tuser: state.user,\n\t\tmessages: state.visibleMessages,\n\t\treachedBegin: getIsReachedBegin(state),\n\t\treachedEnd: getIsReachedEnd(state),\n\t\tisLiveMode: state.isLiveMode,\n\t}\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tmessageSend: (user, text) => dispatch(messageSend({user, text})),\n\t\tmessageShift: (number) => dispatch(messageShift(number)),\n\t\tliveModeToggle: (value) => dispatch(liveModeToggle(value)),\n\t}\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatRoom);","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport './UserList.css'\n\nclass UserList extends Component {\n\n\n\trender() {\n\t\tconst listItems = this.props.userList.map((item) =>\n\t\t\t<li key={item}>{item}</li>\n\t\t);\n\t\treturn (\n\t\t\t<div className='user-list'>\n\t\t\t\t<h3>Сейчас в чате</h3>\n\t\t\t\t<div>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{listItems}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tuserList: state.userList\n\t}\n}\n\nexport default connect(mapStateToProps)(UserList);","import React, {Component} from 'react';\nimport io from 'socket.io-client';\nimport {connect} from 'react-redux';\nimport {LoginForm} from './containers/LoginForm/'\nimport {ChatRoom} from './containers/ChatRoom'\nimport {UserList} from './containers/UserList'\nimport './App.css'\n\n\nconst socketUrl = \"http://192.168.1.16:4000\";\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      socket: null\n    };\n  }\n\n\n  initConnect = () => {\n    const socket = io(socketUrl);\n    socket.on('connect', () => {\n      console.log('connected');\n    })\n    this.setState({socket});\n  }\n\n  login = (user) => {\n    const { socket } = this.state;\n    socket.emit('USER_CONNECTED', user);\n    this.setState({user});\n  }\n\n  logout = (user) => {\n    const { socket } = this.state;\n    socket.emit('USER_DISCONNECTED', user);\n    this.setState({user: null});\n  }\n\n  render() {\n    const {user} = this.props;\n    return (\n      <div className='app'>\n        {!user ? <LoginForm /> :\n          <div className='chat'>\n            <UserList/>\n            <ChatRoom/>\n          </div>}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state = {}) => {\n  return {user: state.user};\n};\n\nexport default connect(mapStateToProps)(App);","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from './store/';\nimport {Provider} from 'react-redux';\n\nimport App from \"./App\";\n\nconst app = document.getElementById('root');\n\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t\t<App/>\n\t</Provider>\n\t, app);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}